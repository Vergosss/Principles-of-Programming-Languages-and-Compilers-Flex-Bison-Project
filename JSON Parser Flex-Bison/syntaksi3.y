%{
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<stdbool.h>
extern int yylineno;
extern char* yytext;
extern FILE* yyin;
extern FILE* yyout;
int yylex();
void yyerror(const char* s);
int yydebug=1;
%}
%token LBRACE RBRACE COMMA COLON LBRACKET RBRACKET
%token GAMEID DRAWID DRAWTIME STATUS DRAWBREAK VISUALDRAW PRICEPOINTS AMOUNT
%token WINNINGNUMBERS PRIZECATEGORIES WAGERSTATISTICS LIST BONUS
%token LAST ACTIVE
%token ID DIVIDENT WINNERS DISTRIBUTED JACKPOT FIXED CATEGORYTYPE GAMETYPE
%token COLUMNS WAGERS ADDON
%token <string> STRING;
%token <integer> INTEGER;
%token <pragmatikos> FLOAT;
%token  BOOL;
%token CONTENT TOTALPAGES TOTALELEMENTS NUMBEROFELEMENTS SORT DIRECTION PROPERTY IGNORECASE NULLHANDLING DESCENDING ASCENDING FIRST SIZE NUMBER
%token MINIMUMDISTRIBUTED
%union{
char* string;
unsigned int integer;
double pragmatikos;
bool alithia;
}
%start object
%%
object: LBRACE temp COMMA tempe RBRACE | LBRACE tempe2 RBRACE ;
temp: LAST COLON LBRACE GAMEID COLON INTEGER COMMA DRAWID COLON INTEGER COMMA DRAWTIME COLON INTEGER COMMA STATUS COLON STRING COMMA DRAWBREAK COLON INTEGER COMMA VISUALDRAW COLON INTEGER COMMA PRICEPOINTS COLON LBRACE AMOUNT COLON FLOAT RBRACE COMMA WINNINGNUMBERS COLON LBRACE LIST COLON array COMMA BONUS COLON arrena RBRACE COMMA kanonasprize COMMA kanonaswager RBRACE ;
kanonasprize: PRIZECATEGORIES COLON arr ;
arr: LBRACKET RBRACKET | LBRACKET arr_elem RBRACKET;
arr_elem: newobject | arr_elem COMMA newobject ;
newobject: LBRACE ID COLON INTEGER COMMA DIVIDENT COLON FLOAT COMMA WINNERS COLON INTEGER COMMA DISTRIBUTED COLON FLOAT COMMA JACKPOT COLON FLOAT COMMA FIXED COLON FLOAT COMMA CATEGORYTYPE COLON INTEGER COMMA GAMETYPE COLON STRING RBRACE {if ($4!=1)}
|LBRACE ID COLON INTEGER COMMA DIVIDENT COLON FLOAT COMMA WINNERS COLON INTEGER COMMA DISTRIBUTED COLON FLOAT COMMA JACKPOT COLON FLOAT COMMA FIXED COLON FLOAT COMMA CATEGORYTYPE COLON INTEGER COMMA GAMETYPE COLON STRING COMMA MINIMUMDISTRIBUTED COLON FLOAT RBRACE {if ($4==1)}; 
kanonaswager: WAGERSTATISTICS COLON LBRACE COLUMNS COLON INTEGER COMMA WAGERS COLON INTEGER COMMA ADDON COLON jsonarr RBRACE ;
jsonarr: LBRACKET RBRACKET | LBRACKET jsonarr_elem RBRACKET ;
jsonarr_elem: value | jsonarr_elem COMMA value ;
array: LBRACKET RBRACKET | LBRACKET array_elem RBRACKET ;
array_elem: INTEGER | array_elem COMMA INTEGER ;
tempe: ACTIVE COLON LBRACE GAMEID COLON INTEGER COMMA DRAWID COLON INTEGER COMMA DRAWTIME COLON INTEGER COMMA STATUS COLON STRING COMMA DRAWBREAK COLON INTEGER COMMA VISUALDRAW COLON INTEGER COMMA PRICEPOINTS COLON LBRACE AMOUNT COLON FLOAT RBRACE COMMA kanonasprize COMMA kanonaswager RBRACE ;
tempe2: CONTENT COLON arrnew COMMA rangerule ;
rangerule: TOTALPAGES COLON INTEGER COMMA TOTALELEMENTS COLON INTEGER COMMA LAST COLON BOOL COMMA NUMBEROFELEMENTS COLON INTEGER COMMA SORT COLON LBRACKET LBRACE DIRECTION COLON STRING COMMA PROPERTY COLON STRING COMMA IGNORECASE COLON BOOL COMMA NULLHANDLING COLON STRING COMMA DESCENDING COLON BOOL COMMA ASCENDING COLON BOOL RBRACE RBRACKET COMMA FIRST COLON BOOL COMMA SIZE COLON INTEGER COMMA NUMBER COLON INTEGER ;
arrnew: LBRACKET RBRACKET | LBRACKET arrnew_elem RBRACKET ;
arrnew_elem: LBRACE GAMEID COLON INTEGER COMMA DRAWID COLON INTEGER COMMA DRAWTIME COLON INTEGER COMMA STATUS COLON STRING COMMA DRAWBREAK COLON INTEGER COMMA VISUALDRAW COLON INTEGER COMMA PRICEPOINTS COLON LBRACE AMOUNT COLON FLOAT RBRACE COMMA WINNINGNUMBERS COLON LBRACE LIST COLON array COMMA BONUS COLON arrena RBRACE COMMA kanonasprize COMMA kanonaswager RBRACE | arrnew_elem COMMA LBRACE GAMEID COLON INTEGER COMMA DRAWID COLON INTEGER COMMA DRAWTIME COLON INTEGER COMMA STATUS COLON STRING COMMA DRAWBREAK COLON INTEGER COMMA VISUALDRAW COLON INTEGER COMMA PRICEPOINTS COLON LBRACE AMOUNT COLON FLOAT RBRACE COMMA WINNINGNUMBERS COLON LBRACE LIST COLON array COMMA BONUS COLON arrena RBRACE COMMA kanonasprize COMMA kanonaswager RBRACE ;
arrena: LBRACKET INTEGER RBRACKET ;
value: INTEGER | FLOAT | STRING ;
%%
void yyerror(const char* s){
fprintf(stderr,"error %s in line : %d\n ",s,yylineno);
}
int main(int argc,char** argv){
FILE* fp=fopen(argv[1],"r");
char c=fgetc(fp);
while(c!=EOF){
printf("%c",c);
c=fgetc(fp);
}
printf("\n\n\n");
fclose(fp);
yyin=fopen(argv[1],"r");
if(yyparse()==0){
printf("succesfull parsing\n");
}
else{
printf("unsuccesfull parsing on line:\n");
yyerror("parse error");
}
}
